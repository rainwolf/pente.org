/** SynchronizedPenteState.java
 *  Copyright (C) 2001 Dweebo's Stone Games (http://www.pente.org/)
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, you can find it online at
 *  http://www.gnu.org/copyleft/gpl.txt
 */

package org.pente.game;

public class SynchronizedPenteState extends SynchronizedGridState implements PenteState {

    PenteState penteState;

    public SynchronizedPenteState(PenteState penteState) {
        super(penteState);

        this.penteState = penteState;
    }

    public synchronized int getNumCaptures(int player) {
        return penteState.getNumCaptures(player);
    }

    public synchronized void setInitCaptures(int player, int caps) {
    	penteState.setInitCaptures(player, caps);
    }
    public synchronized int[] getCaptures(int atMove) {
        return penteState.getCaptures(atMove);
    }
    public boolean isValidPosition(int newPosition, int oldPosition) {
        return penteState.isValidPosition(newPosition, oldPosition);
    }
    public synchronized void setTournamentRule(boolean rule) {
        penteState.setTournamentRule(rule);
    }

    public synchronized void setCaptureLengths(int lengths[]) {
        penteState.setCaptureLengths(lengths);
    }

    public synchronized void setCapturesToWin(int num) {
        penteState.setCapturesToWin(num);
    }
    public synchronized void setGPenteRules(boolean gpente) {
        penteState.setGPenteRules(gpente);
    }
    public synchronized void setDPenteRules(boolean dpente) {
        penteState.setDPenteRules(dpente);
    }
    public synchronized void dPenteSwapDecisionMade(boolean swap) {
        penteState.dPenteSwapDecisionMade(swap);
    }
    public boolean wasDPenteSwapDecisionMade() {
        return penteState.wasDPenteSwapDecisionMade();
    }
    public synchronized boolean didDPenteSwap() {
        return penteState.didDPenteSwap();
    }
}