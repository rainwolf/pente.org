package org.pente.game.test;

import junit.framework.*;

import org.pente.game.*;

public class PenteStateTest extends GomokuStateTest {

    public PenteStateTest(String name) {
        super(name);
    }
    
    public static Test suite() {
        return new TestSuite(PenteStateTest.class);
    }
    
    GridState createGridState(int x, int y) {
        return GridStateFactory.createGridState(
            GridStateFactory.PENTE, x, y);
    }
    
    public void testNormalCapture() {
        PenteState state = (PenteState) createGridState(19, 19);
        
        state.addMove(state.convertMove(9, 9));
        state.addMove(state.convertMove(10, 10));
        state.addMove(state.convertMove(9, 6));
        state.addMove(state.convertMove(11, 11));
        state.addMove(state.convertMove(12, 12));
       
        assertEquals(2, state.getNumCaptures(1));
        assertEquals(0, state.getNumCaptures(2));
        assertEquals(0, state.getPosition(10, 10));
        assertEquals(0, state.getPosition(11, 11));
        
        state.addMove(state.convertMove(10, 10));
        assertEquals(2, state.getPosition(10, 10));
    }

    public void testLeftRightCrossNotCapture() {

        PenteState state1 = (PenteState) createGridState(10, 10);
        
        addMoves(new int[] { 17, 18, 1, 19, 20 }, state1);

        assertEquals(0, state1.getNumCaptures(1));
        assertEquals(0, state1.getNumCaptures(2));
    }

    public void testUndoCapture() {

        PenteState state = (PenteState) createGridState(19, 19);
        
        state.addMove(state.convertMove(9, 9));
        state.addMove(state.convertMove(10, 10));
        state.addMove(state.convertMove(9, 6));
        state.addMove(state.convertMove(11, 11));
        state.addMove(state.convertMove(12, 12));
       
        assertEquals(2, state.getNumCaptures(1));
        assertEquals(0, state.getNumCaptures(2));

        state.addMove(state.convertMove(10, 10));
        assertEquals(2, state.getPosition(10, 10));
        
        assertEquals(true, state.canPlayerUndo(2));
        assertEquals(6, state.getNumMoves());
        state.undoMove();
        
        assertEquals(5, state.getNumMoves());
        
        state.undoMove();
        assertEquals(4, state.getNumMoves());
        assertEquals(0, state.getNumCaptures(1));
        assertEquals(0, state.getNumCaptures(2));
    }
    
    public void testClearCaptures() {
        PenteState state = (PenteState) createGridState(19, 19);
        
        state.addMove(state.convertMove(9, 9));
        state.addMove(state.convertMove(10, 10));
        state.addMove(state.convertMove(9, 6));
        state.addMove(state.convertMove(11, 11));
        state.addMove(state.convertMove(12, 12));
        
        state.clear();
        assertEquals(0, state.getNumCaptures(1));
        assertEquals(0, state.getNumCaptures(2));
    }
    
    public void testWinWithCaptures() {

        PenteState state = (PenteState) createGridState(19, 19);

        addMoves(new int[] { state.convertMove(9, 7), //w
                             state.convertMove(9, 6),
                             state.convertMove(9, 8), //w
                             state.convertMove(1, 1),
                             state.convertMove(9, 11), //w
                             state.convertMove(9, 12),
                             state.convertMove(9, 10), //w
                             state.convertMove(1, 2),
                             state.convertMove(7, 7), //w
                             state.convertMove(6, 6),
                             state.convertMove(8, 8), //w
                             state.convertMove(1, 3),
                             state.convertMove(7, 9), //w
                             state.convertMove(6, 9),
                             state.convertMove(8, 9), //w
                             state.convertMove(9, 9) 
                           }, state);
        
        assertEquals(8, state.getNumCaptures(2));
        assertEquals(0, state.getNumCaptures(1));
        assertEquals(false, state.isGameOver());

        PenteState state2 = (PenteState) createGridState(19, 19);
        state2.setPosition(state2.convertMove(9, 6), 2);
        state2.setPosition(state2.convertMove(1, 1), 2);
        state2.setPosition(state2.convertMove(9, 12), 2);
        state2.setPosition(state2.convertMove(1, 2), 2);
        state2.setPosition(state2.convertMove(6, 6), 2);
        state2.setPosition(state2.convertMove(1, 3), 2);
        state2.setPosition(state2.convertMove(1, 3), 2);
        state2.setPosition(state2.convertMove(6, 9), 2);
        state2.setPosition(state2.convertMove(9, 9), 2);
        assertEquals(true, state.positionEquals(state2));
        
        addMoves(new int[] { state.convertMove(3, 3),
                             state.convertMove(3, 2),
                             state.convertMove(3, 4),
                             state.convertMove(3, 5) }, state);
        
        assertEquals(10, state.getNumCaptures(2));
        assertEquals(0, state.getNumCaptures(1));
        assertEquals(true, state.isGameOver());
    }
    
    public void testNoTournamentRule() {
        
        PenteState state = (PenteState) createGridState(19, 19);
        state.setTournamentRule(false);
        state.addMove(state.convertMove(9, 9));
        state.addMove(state.convertMove(10, 10));
        assertEquals(true, state.isValidMove(state.convertMove(9, 10), 1));
    }

    public void testTournamentRule() {
        
        PenteState state = (PenteState) createGridState(19, 19);
        state.setTournamentRule(true);
        state.addMove(state.convertMove(9, 9));
        state.addMove(state.convertMove(10, 10));
        assertEquals(false, state.isValidMove(state.convertMove(9, 11), 1));
        assertEquals(true, state.isValidMove(state.convertMove(9, 12), 1));
    }
    
    public void testGPenteRule() {

        PenteState state = (PenteState) createGridState(19, 19);
        state.setGPenteRules(true);
        state.addMove(state.convertMove(9, 9));
        state.addMove(state.convertMove(10, 10));
        assertEquals(false, state.isValidMove(state.convertMove(9, 12), 1));
        assertEquals(false, state.isValidMove(state.convertMove(9, 13), 1));
        assertEquals(true, state.isValidMove(state.convertMove(9, 14), 1));
    }

    public void testGameOverOverlines() {

        PenteState state = (PenteState) createGridState(10, 10);

        addMoves(new int[] { 2, 12, 3, 14, 4, 16, 5, 18, 7, 11, 6 }, state);
    
        assertEquals(true, state.isGameOver());
    }

    public void testNoPlayIntoCapture() {

        PenteState state = (PenteState) GridStateFactory.createGridState(
            GridStateFactory.PENTE, 19, 19);
        
        state.addMove(state.convertMove(9, 9));
        state.addMove(state.convertMove(10, 10));
        state.addMove(state.convertMove(12, 12));
        state.addMove(state.convertMove(11, 11));
       
        assertEquals(0, state.getNumCaptures(1));
        assertEquals(0, state.getNumCaptures(2));
        assertEquals(2, state.getPosition(10, 10));
        assertEquals(2, state.getPosition(11, 11));
    }
    
    public void testJeffHardyGame() {

        PenteState state = (PenteState) GridStateFactory.createGridState(
            GridStateFactory.PENTE, 19, 19);
        addMoves(new String[] {
            "K10", "L11", "K7", "L8", "H9", "J8", "K8", "K9", "J10", "K6", "L10",
            "H10", "N10", "M10", "G8", "K11", "M7", "N9", "O8", "M11", "J11",
            "J12", "E6", "F7", "O11", "J9", "J11", "J10", "M9", "J7", "J6",
            "J13", "J14", "J13", "M12", "P12", "M11", "M13", "M10", "M8", "L5",
            "H8", "K8", "L7", "G8" }, state);

        assertEquals(10, state.getNumCaptures(1));
        assertEquals(8, state.getNumCaptures(2));
        assertEquals(true, state.isGameOver());
        assertEquals(1, state.getWinner());    
    }
}